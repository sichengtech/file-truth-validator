<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.sichengtech</groupId>
    <artifactId>file-truth-validator</artifactId>
    <version>1.1</version>

    <name>File Truth Validator</name>
    <description>
        File Truth Validator 工具类通过读取文件的魔数（Magic Number）来检测文件的真实类型。
        魔数是文件头部固定字节序列，用于标识文件格式。例如，JPEG 文件的魔数为 "FFD8FF"，PNG 文件的魔数为 "89504E47"。通过分析这些魔数，可以准确判断文件的实际格式，而非仅依赖文件扩展名。
    </description>
    <url>https://gitee.com/sichengtech_admin/file-truth-validator</url>
    <scm>
        <url>https://gitee.com/sichengtech_admin/file-truth-validator</url>
        <connection>https://gitee.com/sichengtech_admin/file-truth-validator.git</connection>
        <developerConnection>https://gitee.com/sichengtech_admin/file-truth-validator.git</developerConnection>
        <tag>HEAD</tag>
    </scm>
    <developers>
        <developer>
            <id>sichengtech</id>
            <name>sichengtech</name>
            <email>admin@sicheng.net</email>
            <url>http://www.sicheng.net</url>
            <timezone>+8</timezone>
        </developer>
    </developers>
    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://opensource.org/license/MIT</url>
        </license>
    </licenses>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.8.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


    <!-- 为了发布自己的jar包到Maven中央仓库，添加了以下一套配置 -->
    <!-- 发布到 Maven 仓库中的所有文件都要使用 GPG 签名，以保障完整性。GPG 的主要作用是生成密钥对,并签名。
    由于使用 GPG 对Javadoc、jar、源代码进行签名是一个非常耗时的过程，因此通常将这些任务与日常的构建要隔离开来，方式是把这套配置移入到profiles标签表示的环境中。
    然后，当通过激活id为deploy-to-ossrh环境的配置，就可执行向ossrh仓库的部署任务，就可发布自己的jar包到Maven中央仓库，结构如下： -->
    <profiles>

        <profile>
            <id>deploy-to-ossrh</id>  <!-- id为deploy-to-ossrh环境配置 -->
            <build>
                <plugins>
                    <!-- Source 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>3.1.1</version>
                    </plugin>
                    <!-- Source -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>3.2.1</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Javadoc 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.2.0</version>
                        <configuration>
                            <charset>UTF-8</charset>
                            <docencoding>UTF-8</docencoding>
                            <show>package</show>
                            <tags>
                                <tag>
                                    <name>date</name>
                                </tag>
                            </tags>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <doclint>none</doclint>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Gpg Signature GPG 签名插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <!-- id 与 setting.xml 的 gpg 配置中的 id 对应,用于取到密码-->
                                <id>ossrh</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Maven 部署流程插件 Nexus Staging Maven -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>1.6.13</version>
                        <extensions>true</extensions>
                        <configuration>
                            <!-- 与 setting.xml 的 server 配置中的 sonatype-release 对应,用于取到账号与密码-->
                            <serverId>sonatype-release</serverId>
                            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
                            <autoReleaseAfterClose>true</autoReleaseAfterClose>
                            <!-- 超时改为20分钟（默认为 5 min） -->
                            <stagingProgressTimeoutMinutes>20</stagingProgressTimeoutMinutes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <!--指定Maven分发构件Deploy上传jar包时的nexus仓库地址-->
            <!--Sonatype仓库便是Maven中央仓库指定的暂存库，会自动同步到Maven中央仓库 -->
            <distributionManagement>
                <snapshotRepository>
                    <id>sonatype-snapshots</id>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
                <repository>
                    <id>sonatype-release</id>
                    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
            </distributionManagement>
        </profile>
    </profiles>
</project>